security:
    encoders:
        App\Entity\Joueur:
            algorithm: auto
        App\Entity\Admin:
            algorithm: auto # Ensure this matches the algorithm used for encoding passwords

    providers:
        app_user_provider:
            entity:
                class: App\Entity\Joueur
                property: email
        admin_provider:
            entity:
                class: App\Entity\Admin
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            provider: app_user_provider # Explicitly set the provider
            guard:
                authenticators:
                    - App\Security\JoueurAuthenticator

        api:
            pattern:   ^/api
            stateless: true
            provider: app_user_provider # Explicitly set the provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        intranet:
            pattern: ^/intranet/
            stateless: true
            anonymous: false # Ensure anonymous access is disabled for protected routes
            provider: admin_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator # Use JWT authenticator

    access_control:
        - { path: ^/intranet/create, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Allow anonymous access to admin creation
        - { path: ^/intranet/login, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Allow anonymous access to intranet login
        - { path: ^/intranet/, roles: IS_AUTHENTICATED_FULLY } # Ensure all other intranet routes require authentication
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }